// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider  = "postgresql"
  url  	    = env("DATABASE_URL")
}

//! USER
enum Role {
  admin
  user
}

// Le user est le SALON
// Le tatoueur est un employ√© du salon
model User {
  id                String   @id @default(cuid())
  email             String   @unique
  emailVerified     DateTime?
  password          String
  name              String
  role              Role     @default(user)
  createdAt         DateTime @default(now())
  updatedAt         DateTime @updatedAt
  

  Tatoueur          Tatoueur[]
  Client            Client[]
}

model VerificationToken {
  id              String   @id @default(cuid())
  email           String
  token           String   @unique
  expires         DateTime

  @@unique([email, token], name: "email_token")
}

model PasswordResetToken {
  id              String   @id @default(cuid())
  email           String
  token           String   @unique
  expires         DateTime

  @@unique([email, token], name: "email_token")
}

//! SALON
model Tatoueur {
  id              String       @id @default(cuid())
  name            String
  user            User         @relation(fields: [userId], references: [id])
  userId          String       // salon qui poss√®de ce tatoueur
  img             String?
  description     String?
  phone           String?
  instagram       String?
  createdAt       DateTime     @default(now())
  updatedAt       DateTime     @updatedAt

  appointments Appointment[]
}

//! AGENDA ET RDV
enum PrestationType {
  TATTOO
  PIERCING
  RETOUCHE
  PROJET
}
enum AppointmentStatus {
  PENDING
  CONFIRMED
  DECLINED
  CANCELED
}

model Appointment {
  id              String             @id @default(cuid())
  title           String
  prestation      PrestationType
  start           DateTime
  end             DateTime
  allDay          Boolean            @default(false)
  status          AppointmentStatus  @default(PENDING)
  clientName      String
  clientEmail     String
  clientPhone     String?
  clientBirthDate DateTime?

  tatoueur        Tatoueur           @relation(fields: [tatoueurId], references: [id])
  tatoueurId      String

  client          Client?            @relation(fields: [clientId], references: [id])
  clientId        String?

  //  Lien direct vers un TattooDetail pour les projets
  tattooDetail    TattooDetail?
  tattooDetailId  String?

  createdAt       DateTime           @default(now())
  updatedAt       DateTime           @updatedAt
}

//! CLIENT & FICHE CLIENT
model Client {
  id                  String   @id @default(cuid())
  userId              String   // Salon propri√©taire de la fiche client
  user                User     @relation(fields: [userId], references: [id])
  
  firstName           String
  lastName            String
  email               String   @unique
  phone               String
  birthDate           DateTime
  address             String?

  // Lien vers les RDV (facultatif)
  appointments      Appointment[]   // üëà Un client peut avoir plusieurs RDV

  // Relations
  tattooDetail        TattooDetail?
  medicalHistory      MedicalHistory?
  tattooHistory       TattooHistory[]
  aftercareRecords    Aftercare[]

  createdAt           DateTime @default(now())
  updatedAt           DateTime @updatedAt
}

model TattooDetail {
  id          String   @id @default(cuid())

  // Soit li√© √† un client
  clientId       String?  @unique
  client         Client?  @relation(fields: [clientId], references: [id])

  // Soit li√© √† un rendez-vous
  appointmentId  String?  @unique
  appointment    Appointment? @relation(fields: [appointmentId], references: [id])

  type        String
  zone        String
  size        String
  colorStyle  String       // Noir & gris ou Couleur
  reference   String?      // URL image du client
  sketch      String?      // URL du croquis
  estimatedPrice Float?

  @@unique([clientId, appointmentId])
}

model MedicalHistory {
  id          String   @id @default(cuid())
  clientId    String   @unique
  client      Client   @relation(fields: [clientId], references: [id])

  allergies       String?
  healthIssues    String?
  medications     String?
  pregnancy       Boolean
  tattooHistory   String?  // Commentaire sur anciens tatouages
}

model TattooHistory {
  id          String   @id @default(cuid())
  clientId    String
  client      Client   @relation(fields: [clientId], references: [id])

  date        DateTime
  description String
  beforeImage String?   // URL
  afterImage  String?   // URL
  inkUsed     String?
  healingTime String?
  careProducts String?
}

model Aftercare {
  id          String   @id @default(cuid())
  clientId    String
  client      Client   @relation(fields: [clientId], references: [id])

  submittedAt DateTime @default(now())
  photoUrl    String?
  comment     String?
  approved    Boolean  @default(false)
  visibleInPortfolio Boolean @default(false)
}


// //! SALON SETTINGS
// model SalonSettings {
//   id                      String   @id @default(cuid())
//   salonName               String
//   autoConfirmationEnabled Boolean  @default(false)
//   createdAt               DateTime @default(now())
// }